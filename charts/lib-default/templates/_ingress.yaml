{{- define "library.ingress" }}
{{ $root := dict "Chart" .Chart "Release" .Release "Values" (mergeOverwrite (deepCopy .Values) (coalesce .Values.ingress dict)) }}

{{- if eq (len (default list .Values.paths)) 0 }}
{{- $_ := set $root.Values "paths" (list (dict "service" (include "library.factory.resource_name" $root ) "port" (include "library.factory.service.port.name" $root))) }}
{{- end }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
{{- include "library.metadata" $root }}
spec:
  {{- if $root.Values.ingressClassName }}
  ingressClassName: {{ $root.Values.ingressClassName }}
  {{- end }}
  tls:
    - hosts:
        - {{ coalesce $root.Values.host $root.Values.domain }}
      secretName: {{ coalesce $root.Values.certificate (printf "%s-certificate" (include "library.factory.resource_name" $root )) }}
  rules:
    - host: {{ coalesce $root.Values.host $root.Values.domain }}
      http:
        paths:
          {{- range .Values.paths }}
          - pathType: ImplementationSpecific
            {{- if and .path (ne (.path | toString) "/") }}
            path: {{ .path }}
            {{- end }}
            backend:
              service:
                name: {{ .service }}
                port:
                  number: {{ .port }}
          {{- end }}
{{- end }}
